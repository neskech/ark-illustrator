import { type BrushConfigType } from '~/drawingEditor/Input/toolSystem/settings/brushConfig';
import { type BrushPoint } from '~/drawingEditor/Input/toolSystem/tools/brushTool/brushTool';
import { type RenderContext } from '../../renderer';
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! TYPE DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export type BrushRendererContext = {
  pointData: BrushPoint[];
} & RenderContext;

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! MAIN CLASS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export abstract class BrushImplementationRenderer {
  private implType: BrushConfigType;

  constructor(implType: BrushConfigType) {
    this.implType = implType;
  }

  abstract renderBatchedStrokeContinued(context: BrushRendererContext): void;

  abstract renderBatchedStrokeFinished(context: BrushRendererContext): void;

  abstract renderBatchedStrokePartitioned(context: BrushRendererContext): void;

  abstract renderIncrementalStroke(context: BrushRendererContext): void;

  public isOfType(implType: BrushConfigType): boolean {
    return this.implType == implType;
  }
}

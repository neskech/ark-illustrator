import { assertNotNull } from '../../../../util/general/contracts';
import { Tool, type ToolUpdateContext } from '../tool';
import type ToolRenderers from '~/drawingEditor/renderer/toolRenderers/toolRendererList';
import { type PointerType } from '../inputState';
import { type Vector2 } from 'matrixgl_fork';

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! CONSTANTS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! TYPE DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

type RectangleState = {
  anchorPosition: Vector2;
  oppositePosition: Vector2;
};

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! CLASS DEFINITION
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export class RectangleTool extends Tool {
  private isDrawingRectangle: boolean;
  private targetPointer: PointerType | null;
  private rectangleState: RectangleState | null;

  constructor() {
    super();
    this.isDrawingRectangle = false;
    this.targetPointer = null;
    this.rectangleState = null;
  }

  updateAndRender(context: ToolUpdateContext, toolRenderers: ToolRenderers): void {
    this.handleRectangleStart(context);

    if (!this.isDrawingRectangle) return;

    assertNotNull(this.rectangleState);
    assertNotNull(this.targetPointer);

    const renderer = toolRenderers.getRectangleToolRenderer();

    const pos = context.camera.mouseToWorld(
      context.inputState.getPointerPositionClient(this.targetPointer),
      context.canvas
    );
    this.rectangleState.oppositePosition = pos;

    if (context.inputState.isPointerDown(this.targetPointer)) {
      renderer.renderRectangleContinued({
        anchorPosition: this.rectangleState.anchorPosition,
        otherPosition: this.rectangleState.oppositePosition,
        ...context,
      });
    } else {
      renderer.renderRectangleFinished({
        anchorPosition: this.rectangleState.anchorPosition,
        otherPosition: this.rectangleState.oppositePosition,
        ...context,
      });
      this.rectangleState = null;
      this.targetPointer = null;
      this.isDrawingRectangle = false;
    }
  }

  handleRectangleStart(context: ToolUpdateContext) {
    if (this.isDrawingRectangle) return;

    const pointerTypes: PointerType[] = ['mouse', 'pen'];
    for (const type of pointerTypes) {
      if (context.inputState.isPointerDown(type)) {
        this.targetPointer = type;
        break;
      }
    }

    if (this.targetPointer == null) return;

    context.layerManager.registerMutation();
    this.isDrawingRectangle = true;

    const pos = context.camera.mouseToWorld(
      context.inputState.getPointerPositionClient(this.targetPointer),
      context.canvas
    );
    this.rectangleState = {
      anchorPosition: pos,
      oppositePosition: pos,
    };
  }
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! HELPERS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

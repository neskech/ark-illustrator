import { unreachable } from '~/util/general/funUtils';
import { type BrushPoint } from '../brushTool';
import { SmoothedInterpolator, type SmoothedInterpolatorSettings } from './smoothedInterpolator';
import { type BaseBrushSettings } from '../../../settings/brushSettings';
import { assert } from '~/util/general/contracts';
import { LinearInterpolator, type LinearInterpolatorSettings } from './linearInterpolator';

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! TYPE DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export type InterpolatorSettings = SmoothedInterpolatorSettings | LinearInterpolatorSettings;
type InterpolatorType = InterpolatorSettings['type'];

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! MAIN CLASS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export abstract class Interpolator {
  private interpolatorType: InterpolatorType;

  constructor(interpolatorType: InterpolatorType) {
    this.interpolatorType = interpolatorType;
    this.assertCorrectStabilizerType(interpolatorType);
  }

  abstract process(points: BrushPoint[], brushSettings: BaseBrushSettings): BrushPoint[];
  abstract estimateWorstCaseLengthOfOutput(brushSettings: BaseBrushSettings): number;

  public static getInterpolatorOfAppropiateType(
    settings: InterpolatorSettings,
    _: BaseBrushSettings
  ): Interpolator {
    switch (settings.type) {
      case 'smoothed':
        return new SmoothedInterpolator(settings);
      case 'linear':
        return new LinearInterpolator(settings);
      default:
        return unreachable();
    }
  }

  public isOfType(stabilizerType: InterpolatorType): boolean {
    return this.interpolatorType == stabilizerType;
  }

  private assertCorrectStabilizerType(interpolatorType: InterpolatorType) {
    switch (interpolatorType) {
      case 'smoothed':
        assert(this instanceof SmoothedInterpolator);
      default:
        return unreachable();
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! EXPORTED HELPERS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export function getDefaultInterpolatorSettings(): InterpolatorSettings {
  return { type: 'linear', spacing: 0.5 };
}

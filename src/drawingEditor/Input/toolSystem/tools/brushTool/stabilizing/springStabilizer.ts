import { type BaseBrushSettings } from '../../../settings/brushSettings';
import { type BrushPoint } from '../brushTool';
import { Stabilizer } from './stabilizer';

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! TYPE DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export interface SpringStabilizerSettings {
  type: 'spring';
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! MAIN CLASS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

export default class SpringStabilizer extends Stabilizer {
  settings: SpringStabilizerSettings;

  constructor(settings: SpringStabilizerSettings, _: BaseBrushSettings) {
    super('spring');
    this.settings = settings;
  }

  addPoint(point: BrushPoint): void {
    throw new Error('Method not implemented.');
  }

  getProcessedCurve(): BrushPoint[] {
    throw new Error('Method not implemented.');
  }

  getRawCurve(): BrushPoint[] {
    throw new Error('Method not implemented.');
  }

  reset(): void {
    throw new Error('Method not implemented.');
  }

  update(deltaTime: number): void {
    throw new Error('Method not implemented.');
  }
}
